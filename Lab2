{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMOW41H5/oevtGqYuJpG2ZI"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**Lab-2:Implement breadth first,depth first and A*search alogarithms**\n","![bfs(![bfs())"],"metadata":{"id":"dPc4lMAdwVdb"}},{"cell_type":"markdown","source":["**Part-1:Implement breadth first search algorithm using a queue**\n",""],"metadata":{"id":"w1X6WoLvm5Or"}},{"cell_type":"code","source":["import numpy as np"],"metadata":{"id":"qIt2hwXpwb7J"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from queue import Queue\n","graph={0:[1,2,3], 1:[0,2], 2:[1,0,5], 3:[0,4], 4:[3,7], 5:[2,6], 6:[5,7], 7:[4,6]}\n","print(\"The adjacency List representing the graph is:\")\n","print(graph)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UEUlGg7Hwi_h","executionInfo":{"status":"ok","timestamp":1706588052046,"user_tz":-330,"elapsed":12,"user":{"displayName":"2203 A51119","userId":"17963618866970042327"}},"outputId":"8c3ec75c-f657-43b0-8a42-c8533908b454"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["The adjacency List representing the graph is:\n","{0: [1, 2, 3], 1: [0, 2], 2: [1, 0, 5], 3: [0, 4], 4: [3, 7], 5: [2, 6], 6: [5, 7], 7: [4, 6]}\n"]}]},{"cell_type":"code","source":["def bfs(graph,source):\n","  Q=Queue()\n","  visited_vertices=set()\n","  Q.put(source)\n","  visited_vertices.update({source})\n","  while not Q.empty():\n","    vertex=Q.get()\n","    print(vertex,end=\"-->\")\n","    for u in graph[vertex]:\n","      if u not in visited_vertices:\n","        Q.put(u)\n","        visited_vertices.update({u})\n","\n","\n","print(\"BFS traversal of graph with source 0 is:\")\n","bfs(graph,0)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iJt1XisbxL7a","executionInfo":{"status":"ok","timestamp":1706588925119,"user_tz":-330,"elapsed":12,"user":{"displayName":"2203 A51119","userId":"17963618866970042327"}},"outputId":"0d9cd2f4-5de7-489b-c01e-d8b1edbc9840"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["BFS traversal of graph with source 0 is:\n","0-->1-->2-->3-->5-->4-->6-->7-->"]}]},{"cell_type":"markdown","source":["**Part-2: Implement Depth First Search Algorithm**"],"metadata":{"id":"c1O0Us9bsVhg"}},{"cell_type":"code","source":["graph1={\n","    'A' : ['C','D','G'],\n","    'B' : ['A'],\n","    'C' : ['A','D','F'],\n","    'D' : ['A','C','E','G','H'],\n","    'E' : ['D','F','H'],\n","    'F' : ['C','E'],\n","    'G' : ['A','D','H'],\n","    'H' : ['D','E','G'],\n","\n","}\n","print(\"The adjacency List representing the graph is:\")\n","print(graph1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"73KmrwcBslE8","executionInfo":{"status":"ok","timestamp":1706590897695,"user_tz":-330,"elapsed":930,"user":{"displayName":"2203 A51119","userId":"17963618866970042327"}},"outputId":"caad2c0f-9805-43ab-a47c-249a8d9bd280"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["The adjacency List representing the graph is:\n","{'A': ['C', 'D', 'G'], 'B': ['A'], 'C': ['A', 'D', 'F'], 'D': ['A', 'C', 'E', 'G', 'H'], 'E': ['D', 'F', 'H'], 'F': ['C', 'E'], 'G': ['A', 'D', 'H'], 'H': ['D', 'E', 'G']}\n"]}]},{"cell_type":"code","source":["def dfs(graph,node,visited):\n","  if node not in visited:\n","    visited.append(node)\n","    for k in graph[node]:\n","      dfs(graph,k,visited)\n","  return visited\n","\n","visited=dfs(graph1,'B',[])\n","print(visited)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c_94mnFrvpST","executionInfo":{"status":"ok","timestamp":1706591034347,"user_tz":-330,"elapsed":8,"user":{"displayName":"2203 A51119","userId":"17963618866970042327"}},"outputId":"e570875c-aa34-475a-b1d2-59e8663c6a8d"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["['B', 'A', 'C', 'D', 'E', 'F', 'H', 'G']\n"]}]},{"cell_type":"markdown","source":["**Part-3: Implementation of A* Algorithm/OR Graph Search Algorithm**"],"metadata":{"id":"oTcQqv3dw-vM"}},{"cell_type":"code","source":["from copy import"],"metadata":{"id":"E_jkzHmnxP2L"},"execution_count":null,"outputs":[]}]}